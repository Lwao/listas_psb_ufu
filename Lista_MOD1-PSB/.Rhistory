num <- 0
while(num<5){
print(var)
num <- num + 1
}
#for
var <- c(1:5)
for(num in var)
{
print("ola")
}
#for
var <- c(1:5)
for(num in var)
{
print("ola")
}
# function
myfunction <- function(x,y)
{
num <- x + y
return(num)
}
a <- myfunction(100, 200)
print(a)
myfunction <- function(x,y)
{
num <- 300 + 400
return(num)
}
a <- myfunction()
print(a)
myfunction <- function(x=3,y=5)
{
num <- x + y
return(num)
}
a <- myfunction()
print(a)
print(sum(200, 100))
print(abs(-1000))
print(max(100, 200))
print(min(100, 200))
print(sqrt(81))
num <- c(2, 8, 5, 9, 3)
print(sort(num))
library(stringr) # calling library
x <- c("why", "video", "cross", "extra", "deal", "authority")
str_length(x)
str_c(x, collapse = ", ")
str_sub(x, start = 1, end = 2)
m_str <- format(100)
print(m_str)
# str cat
a <- "R"
b <- "em"
c <- "8"
d <- "horas"
str_c(a,b, sep = " ")
paste(a,b,c,d)
str <- "Engenharia Biomédica - UFU"
str_length(str)
str <- "ENGENHARIA BIOMÉDICA - UFU"
str_to_lower(str)
str <- "engenharia biomédica - ufu"
str_to_upper(str)
str <- "engenharia biomédica - ufu"
str_to_title(str)
str <- "engenharia biomédica - ufu"
str_replace(str,'ufu', "UFU")
# integer vector
v.inteiro <- integer(10)
v.inteiro <- c(1:10)
# double vector
v.double <- numeric(10)
v.double <- c(2.5, c(1:9))
# logical vector
v.logical <- logical(10)
v.logical <- c(F, T, F, F, T, F, T, T, T, F)
# complex vector
v.complex <- complex(10)
v.complex <- c(1+2i, 3+1i, 5-4i, 9-0.1i, 10-54i,
100-1i, -2-2i, 3+3i, 10-0i, 8)
# raw vector
v.raw <- raw(length = 5)
rawToChar(v.raw)
v.raw[1] <- as.raw(10)
rawToChar(v.raw[1])
v.raw[2] <- as.raw(5)
rawToChar(v.raw[2])
print("céu azul") # vector of chars
print("98.1") # double
print(2:8) # integer vector
print(1.8:6.8) # double vector
print (c(3,4,5)) # also integer vector
print(c("apple", "banana", "cherry")) # string vector
seq(from = 1, to=2, by = 0.1) # ranging vector
v1 <- seq(from=0, to=2, by =0.1)
print(v1)
print(v1[1])
print(v1[c(1, 4)])
v2 <- c("maçã", "banana", "amora")
print(v2[2])
print(v2[c(1, 3)])
v3 <- c("maçã", "banana", "amora")
print(v3[c(FALSE, TRUE, FALSE)]) # only true values are displayed
v2 <- c("maçã", "banana", "amora")
print(v2)
print(v2[-2]) # removing second element
v1 <- c(1, 2, 3)
v2 <- c(4, 5, 6)
print(v1 + v2) # vector sum
print(v1 - v2) # vector sub
print(v1 * v2) # vector mul
print(v1/v2) # vector div
v1 <- c(4,5,6,7,8,9)
v2 <- c(2,3)
r <- v1 + v2
print(r)print(v2 - v1)
v<-c(1:10)
print(sort(v, decreasing = TRUE))
a<-seq(from=-1, to=1, by = 0.1)
print(sort(a, decreasing = FALSE))
ml <- list("a", "b", "c", "d")
print(ml)
print(ml[2])
ml[5] <- 45.67
print(ml)
ml[5] <- NULL
print(ml)
ml[2] <- "atualizei o segundo elemento"
print(ml[2])
l1 <- list("a", "b", 2)
l2 <- list("d", "e", 3)
l12  <- c(l1, l2)
print(l12)
v12 <- unlist(l12)
print(v12)
v <- c(1:12)
vnames <- list(
c("row1", "row2"), # row names
c("col1", "col2", "col3","col4","col5","col6")) # column names
m <- matrix(v, nrow = 2, ncol = 6, byrow = TRUE, dimnames = vnames)
print(m)
m <- matrix(v, nrow = 2, ncol = 6, byrow = FALSE, dimnames = vnames)
print(m)
print(m[2,3])
print(m[1,3])
print(m[2,6])
print(m[1,4])
m2 <- matrix(c(4,5,6,7,8,9), nrow = 2)
print(m2)
print(m2 + m2)
print(m2 - m2)
print(m2 * m2)
print(m2/3*m2)
rownames <- c("r1", "r2", "r3")
colnames <- c("c1", "c2", "c3",  "c4")
m1 <- matrix(c(1:12), nrow = 3, ncol = 4, dimnames = list(rownames, colnames))
print(m1)
M1 = matrix(c(46,  41,  85,  94,  10,  21,  27,  39,  89), nrow = 3)
M2 = matrix(c(26,  54,  39,  32,  62,  85,  19,  57,  38), nrow = 3)
## multiplication
M_prod = M1 %*% M2
print(M_prod); cat("\n")
M_transp = t(M1)
print(M_transp); cat("\n")
det(M1) # determinant of matrix
M_inversa = solve(M1)
print(M_inversa); cat("\n")
solve(M1)%*%M1
sum(diag(M1))
crossprod(M1,M2)   # M1'M2
kronecker(M1, M2)
print(array(1:8))
print(array(1:8, dim = c(2,4)))
print(array(1:16, dim = c(2,4,2)))
rowname <- c("r1", "r2", "r3")
colname <- c("c1", "c2", "c3")
matrixname <- c("m1", "m2")
marray <- array(1:18, dim = c(3,3,2),
dimnames = list(rowname,
colname,
matrixname))
print(marray)
print( marray[2, 3 ,1] )
print(marray[,,1])
print(marray[2,,1])
vector1 <- c(1,2,3)
vector2 <- c(4,5,6,7,8,9)
marray <- array(c(vector1, vector2),
dim = c(3,3,1))
print(marray)
result1 <- apply(marray, c(1), sum)
print(result1)
result2 <- apply(marray, c(2), sum)
apply(marray, c(3), sum)
result3 <- apply(marray, c(3), sort)
print(result3)
myfactor <- factor(1:5, levels=1:8, labels = c("a"))
print(myfactor)
data <- c("A", "C", "B", "B", "C", "A")
myfactor <- factor(data)
print(myfactor)
myfactor <- factor(1:5, levels = 1:3,
labels=c("a", "b", "c"))
print(myfactor)
data <- c("A", "C", "B", "B", "C", "A")
myfactor <- factor(data, labels=c("maçã", "banana", "uva"))
print(myfactor)
myfactor <- factor(c("A", "B","C"),
levels = c("C", "B", "A"))
print(myfactor)
L <- gl(4,2, labels = c("A", "B", "C", "D"))
print(L)
L <- gl(4,5, labels = c("A", "B", "C", "D"))
print(L)
sex <- factor(c("male", "female", "female", "male"))
levels(sex)
nlevels(sex)
food <- factor(c("low", "high", "medium", "high", "low", "medium", "high"))
levels(food)
food <- factor(food, levels = c("low", "medium", "high"))
levels(food)
food <- factor(food, levels = c("low", "medium", "high"), ordered = TRUE)
levels(food)
exercise <- factor(c("l", "n", "n", "i", "l"), levels = c("n", "l", "i"), ordered = TRUE)
print(exercise)
df <- data.frame(
id = c(1:5),
name = c("Silvana", "João", "Maria", "Roberto", "Carla"),
score = c(85,99,95,92,96),
year = c("2009", "2002", "2008", "2006", "2007"),
stringsAsFactors = FALSE
)
print(df)
str(df)
summary(df)
print(df$id)
print(df$name)
print(df$score)
print(df$year)
df$idade <- c(30,40,17,12,98)
print(df)
newRows <- data.frame(
id = c(6,7),
name = c("Rui", "Alana"),
score = c(100, 33),
year = c("1999", "1997"),
idade = c(43, 33),
stringsAsFactors = FALSE
)
df <- rbind(df, newRows)
print(df)
id <- c("001", "002", "003", "004")
name <- c("Anna", "Judy", "Tony", "Nacy")
age <- c(18, 16, 20, 19)
members <- cbind(id, name,age)
print(members)
library(dplyr)
library(nycflights13)
dim(flights)
str(flights)
filter(flights, month == 1, day == 1)
arrange(flights, dep_time, day, month, year)
arrange(flights, dep_time, desc(day), month, year)
select(flights, year, month, day)
rename(flights, tail_num = tailnum)
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
transmute(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60)
)
summarise(flights,
delay = mean(dep_delay, na.rm = TRUE)
)
sample_n(flights, 10)
sample_frac(flights, 0.01)
by_tailnum <- group_by(flights, tailnum)
delay <- summarise(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay <- filter(delay, count > 20, dist < 2000)
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
select(flights, year)
select(flights, 1)
select(flights, starts_with("dep"))
# Piping
a1 <- group_by(flights, year, month, day)
a2 <- select(a1, arr_delay, dep_delay)
a3 <- summarise(a2,
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE))
a4 <- filter(a3, arr > 30 | dep > 30)
# or...
flights %>%
group_by(year, month, day) %>%
select(arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
library(dplyr)
df <- data.frame( # it was used generic data
id = 1:5,
cp = c("curso 1", "curso 1", "curso 2", "curso 1", "curso 2"),
pc = c(5, 2, 4, 9, 9),
peso = c(40, 80, 90, 50, 60),
idade = c(20, 22, 21, 19, 18),
altura = c(180, 129, 160, 170, 180),
nat = c("avançada", "nula", "nula", "moderada", "baixa")
)
partPerNat <- df %>% count(nat)
print(partPerNat)
numberOfParticipants <- sum(partPerNat$n)
partPerNat$percentual <- partPerNat$n * (100/numberOfParticipants)
print(partPerNat)
idxCol <- c("peso", "idade", "altura") # selected columns
df_globalMean <- colMeans(df[idxCol], na.rm=TRUE)
print(df_globalMean)
selectedPeriod <- 9
df_sortedByPeriod <- df %>% filter(pc == selectedPeriod)
df_periodMean <- colMeans(df_sortedByPeriod[idxCol], na.rm=TRUE)
print(df_periodMean)
selectedCourse <- "curso 1"
df_sortedByCourse <- df %>% filter(cp == selectedCourse)
df_courseMean <- colMeans(df_sortedByCourse[idxCol], na.rm=TRUE)
print(df_courseMean)
str_pad("abc", 2)
str_pad("abc", 4)
str_pad("abc", 1)
str_pad("abc", 2)
str_pad("abc", 3)
str_pad("abc", 4)
str_pad("abc", 6)
str_pad("abc", 5)
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
phone
print(sample_n(mydata,3)) # random rows can be selected for visualization
library(dplyr) # load dplyr
mydata = read.csv("https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv") # loading data from .csv hosted in url
print(sample_n(mydata,3)) # random rows can be selected for visualization
sample_n(mydata,3)
library(dplyr) # load dplyr
mydata = read.csv("https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv")
mydata
print(sample_n(mydata,3))
print(sample_frac(mydata,0.1))
x1 = distinct(mydata)
x2 = distinct(mydata, Index, .keep_all= TRUE) # same as before but maintains all other columns
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE)
mydata2 = select(mydata, Index, State:Y2008) # select some columns of a data frame
mydata = select(mydata, -Index, -State) # drop selected columns
mydata = select(mydata, -c(Index,State)) # same results as before, but different syntax
mydata3 = select(mydata, starts_with("Y")) # select columns that starts according to key char/word
mydata33 = select(mydata, -starts_with("Y")) # same as before, but instead selecting it drops any column that matches
library(dplyr) # load dplyr
mydata = read.csv("https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv") # loading data from .csv hosted in url
print(sample_n(mydata,3)) # random rows can be selected for visualization
print(sample_frac(mydata,0.1)) # visualize  randomly percentage of rows
x1 = distinct(mydata) # eliminate duplicates in data on all columns
x2 = distinct(mydata, Index, .keep_all= TRUE) # same as before but maintains all other columns
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE) # remove duplicates rows based in multiples columns/variables
mydata2 = select(mydata, Index, State:Y2008) # select some columns of a data frame
select(mydata, -Index, -State) # drop selected columns
select(mydata, -c(Index,State)) # same results as before, but different syntax
mydata3 = select(mydata, starts_with("Y")) # select columns that starts according to key char/word
mydata33 = select(mydata, -starts_with("Y")) # same as before, but instead selecting it drops any column that matches
library(dplyr) # load dplyr
mydata = read.csv("https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv") # loading data from .csv hosted in url
print(sample_n(mydata,3)) # random rows can be selected for visualization
print(sample_frac(mydata,0.1)) # visualize  randomly percentage of rows
x1 = distinct(mydata) # eliminate duplicates in data on all columns
x2 = distinct(mydata, Index, .keep_all= TRUE) # same as before but maintains all other columns
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE) # remove duplicates rows based in multiples columns/variables
mydata2 = select(mydata, Index, State:Y2008) # select some columns of a data frame
select(mydata, -Index, -State) # drop selected columns
select(mydata, -c(Index,State)) # same results as before, but different syntax
mydata3 = select(mydata, starts_with("Y")) # select columns that starts according to key char/word
mydata33 = select(mydata, -starts_with("Y")) # same as before, but instead selecting it drops any column that matches
mydata4 = select(mydata, contains("I")) # select columns that contains char/word
mydata5 = select(mydata, State, everything()) # keeps column State in front of every other one
mydata6 = rename(mydata, Index1=Index) # rename column
mydata7 = filter(mydata, Index == "A") # filter subset that matches condition in argument
mydata7 = filter(mydata6, Index %in% c("A", "C")) # multiple filter criteria
mydata8 = filter(mydata6, Index %in% c("A", "C") & Y2002 >= 1300000 ) # using AND in condition
mydata9 = filter(mydata6, Index %in% c("A", "C") | Y2002 >= 1300000) # using OR in condition
mydata7 = filter(mydata6, Index %in% c("A", "C")) # multiple filter criteria
mydata7 = filter(mydata, Index == "A")
mydata7 = filter(mydata6, Index %in% c("A", "C"))
rename(mydata, Index1=Index) # rename column
mydata7 = filter(mydata, Index == "A") # filter subset that matches condition in argument
mydata7 = filter(mydata6, Index %in% c("A", "C")) # multiple filter criteria
mydata8 = filter(mydata6, Index %in% c("A", "C") & Y2002 >= 1300000 ) # using AND in condition
mydata9 = filter(mydata6, Index %in% c("A", "C") | Y2002 >= 1300000) # using OR in condition
mydata10 = filter(mydata6, !Index %in% c("A", "C")) # using NOT in condition
mydata10 = filter(mydata6, grepl("Ar", State)) # search for pattern matches that contains argument
summarise(mydata, Y2015_mean = mean(Y2015), Y2015_med=median(Y2015)) # mean and median
mydata6 = mydata# rename(mydata, Index1=Index) # rename column
mydata7 = filter(mydata, Index == "A") # filter subset that matches condition in argument
mydata7 = filter(mydata6, Index %in% c("A", "C")) # multiple filter criteria
mydata8 = filter(mydata6, Index %in% c("A", "C") & Y2002 >= 1300000 ) # using AND in condition
mydata9 = filter(mydata6, Index %in% c("A", "C") | Y2002 >= 1300000) # using OR in condition
t = summarise_at(group_by(mydata, Index), vars(Y2011, Y2012), funs(n(), mean(., na.rm = TRUE))) # summarise data by categorical columns (not numeric or quantitative)
t = mydata %>% filter(Index %in% c("A", "C","I")) %>% group_by(Index) %>% do(head( . , 2)) # filter data within categorical column
t = mydata %>% group_by(Index)%>% summarise(Mean_2014 = mean(Y2014, na.rm=TRUE), Mean_2015 = mean(Y2015, na.rm=TRUE)) %>% arrange(desc(Mean_2015)) # summarise, group and sort together
mydata1 = mutate(mydata, change=Y2015/Y2014) # create new column with mutate
mydata11 = mutate_all(mydata, funs("new" = .* 1000)) # multiple all columns by 1000
mydata12 = mutate_at(mydata, vars(Y2008:Y2010), funs(Rank=min_rank(.))) # ranking columns
mydata1 = mutate(mydata, change=Y2015/Y2014) # create new column with mutate
mydata11 = mutate_all(mydata, funs("new" = .* 1000)) # multiple all columns by 1000
t = mydata %>% filter(Index %in% c("A", "C","I")) %>% group_by(Index) %>% do(head( . , 2)) # filter data within categorical column
t = mydata %>% group_by(Index)%>% summarise(Mean_2014 = mean(Y2014, na.rm=TRUE), Mean_2015 = mean(Y2015, na.rm=TRUE)) %>% arrange(desc(Mean_2015)) # summarise, group and sort together
mydata1 = mutate(mydata, change=Y2015/Y2014) # create new column with mutate
mydata11 = mutate_all(mydata, funs("new" = .* 1000)) # multiple all columns by 1000
mydata12 = mutate_at(mydata, vars(Y2008:Y2010), funs(Rank=min_rank(.))) # ranking columns
t = mydata %>% filter(Index %in% c("A", "C","I")) %>% group_by(Index) %>% do(head( . , 2)) # filter data within categorical column
t = mydata %>% group_by(Index)%>% summarise(Mean_2014 = mean(Y2014, na.rm=TRUE), Mean_2015 = mean(Y2015, na.rm=TRUE)) %>% arrange(desc(Mean_2015)) # summarise, group and sort together
mydata1 = mutate(mydata, change=Y2015/Y2014) # create new column with mutate
mydata12 = mutate_at(mydata, vars(Y2008:Y2010), funs(Rank=min_rank(.))) # ranking columns
out = mydata %>% group_by(Index) %>% filter(min_rank(desc(Y2015)) == 1) %>% select(Index, State, Y2015) # select State that generated highest income among the column Index
out2 = mydata %>% group_by(Index) %>% mutate(Total=cumsum(Y2015)) %>% select(Index, Y2015, Total) # cumulative income of Index column
df1 = data.frame(ID = c(1, 2, 3, 4, 5),
w = c('a', 'b', 'c', 'd', 'e'),
x = c(1, 1, 0, 0, 1),
y=rnorm(5),
z=letters[1:5])
df2 = data.frame(ID = c(1, 7, 3, 6, 8),
a = c('z', 'b', 'k', 'd', 'l'),
b = c(1, 2, 3, 0, 4),
c =rnorm(5),
d =letters[2:6])
# INNER JOIN
inner_join(df1, df2, by = c("ID"="ID1"))
# INNER JOIN
inner_join(df1, df2, by = c("ID"="ID"))
df1 = data.frame(ID = c(1, 2, 3, 4, 5),
w = c('a', 'b', 'c', 'd', 'e'),
x = c(1, 1, 0, 0, 1),
y=rnorm(5),
z=letters[1:5])
df2 = data.frame(ID = c(1, 7, 3, 6, 8),
a = c('z', 'b', 'k', 'd', 'l'),
b = c(1, 2, 3, 0, 4),
c =rnorm(5),
d =letters[2:6])
# INNER JOIN
inner_join(df1, df2, by = c("ID"="ID"))
# LEFT JOIN
left_join(df1, df2, by = "ID")
mtcars$model <- rownames(mtcars)
first <- mtcars[1:20, ]
second <- mtcars[10:32, ]
intersect(first, second) # intersect between data common in both data frames
x=data.frame(ID = 1:6, ID1= 1:6)
y=data.frame(ID = 1:6,  ID1 = 1:6)
union(x,y)
union_all(x,y) # apply union
setdiff(first, second) # rows appears in one df but not in the other
if_else(condition, true, false, missing = NULL) # if else statement
setdiff(first, second) # rows appears in one df but not in the other
df <- c(-10,2, NA)
if_else(df < 0, "negative", "positive", missing = "missing value") # if else with data frame
# nested if else
mydf =data.frame(x = c(1:5,NA))
mydf %>% mutate(newvar= if_else(is.na(x),"I am missing",
if_else(x==1,"I am one",
if_else(x==2,"I am two",
if_else(x==3,"I am three","Others")))))
df = mydata %>% rowwise() %>% mutate(Max= max(Y2012,Y2013,Y2014,Y2015)) %>% select(Y2012:Y2015,Max) # row wise operation
df1=data.frame(ID = 1:6,  x=letters[1:6])
df2=data.frame(ID = 7:12, x=letters[7:12])
xy = bind_rows(df1,df2) # combine data frames with rows
xy = bind_cols(x,y) # combine data frames with columns
# percentile
mydata %>% group_by(Index) %>%
summarise(Pecentile_25=quantile(Y2015, probs=0.25),
Pecentile_50=quantile(Y2015, probs=0.5),
Pecentile_75=quantile(Y2015, probs=0.75),
Pecentile_99=quantile(Y2015, probs=0.99))
# divide data into N bins
x= data.frame(N= 1:10)
x = mutate(x, pos = ntile(x$N,5))
mydata2 = select_if(mydata, is.numeric) # select column if it is numeric
mydata3 = select_if(mydata, is.factor) # select factor column
summarise_if(mydata, is.factor, funs(nlevels(.))) # summarise to check number of levels in factor columns
mydata11 = mutate_if(mydata, is.numeric, funs("new" = .* 1000)) # multiply by 1000 to numeric columns
k <- c("a", "b", "", "d")
na_if(k, "") # convert value to NA
iris %>% filter(Sepal.Length > 5.5) %>% pull(Species) # pull output from df to vector
mtcars %>%
group_by(carb) %>%
summarise(across(mpg:qsec, mean)) # performs same operation across multiple columns
mtcars %>%
group_by(carb) %>%
summarise(across(where(is.numeric), mean))
mtcars %>%
group_by(carb) %>%
summarise(across(mpg:qsec, mean), across(vs:gear, n_distinct)) # multiple across
mtcars %>%
group_by(carb) %>%
mutate(across(where(is.numeric), mean)) # with mutate
devtools::install_github(c("ramnathv/htmlwidgets", "rstudio/dygraphs"))
devtools::install_github(c("ramnathv/htmlwidgets", "rstudio/dygraphs"))
install.packages("dygraphs")
library(dygraphs)
